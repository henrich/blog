<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forget me not... on Forget me not...</title>
    <link>https://henrich.github.io/blog/</link>
    <description>Recent content in Forget me not... on Forget me not...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <managingEditor>henrich@debian.org (Hideki Yamane)</managingEditor>
    <webMaster>henrich@debian.org (Hideki Yamane)</webMaster>
    <lastBuildDate>Wed, 16 Jan 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/16/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/16/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;昨日のjdパッケージの削除依頼が実行されてた。早いなー。&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=919248&#34;&gt;ruby-bcatパッケージの削除&lt;/a&gt;もその日のうちだったし。&lt;/li&gt;
&lt;li&gt;systemdの脆弱性の話で「gccの-fstack-clash-protectionオプション指定してるディストリビューションは影響受けない」という話があって「これ、適用しないの？」と聞いたら&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=918914&#34;&gt;該当のバグ登録&lt;/a&gt;を教えてもらった。subscribeして様子見しよう。&lt;/li&gt;
&lt;li&gt;ubuntu-keyringパッケージのdebcont templateのレビューを反映した。なるほどなー

&lt;ul&gt;
&lt;li&gt;既に翻訳版を送ってくれた方々に「こっちでお願い」を送った&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ubuntu-keyring、ubuntu-archive-keyringをtransitional package にすべきと言われてなるほどなーとなったので更新して再度&lt;code&gt;NEW queue&lt;/code&gt;へ&lt;/li&gt;
&lt;li&gt;grcompiler、4.2.7以降のがテストこけちゃうので&lt;a href=&#34;https://github.com/silnrsi/grcompiler/issues/15&#34;&gt;test failureをreport&lt;/a&gt;した&lt;/li&gt;
&lt;li&gt;curlが最新にならないかなぁ、というつぶやきを見かけたので、前のBTSのpushの意味も兼ねて&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=919445&#34;&gt;バグ登録した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tracker.debian.org/news/1021421/accepted-fonts-sawarabi-mincho-20190115-1-source-into-unstable/&#34;&gt;fonts-sawarabi-minchoを更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nadokaが古いままでwatchもエラーになっていたので、重い腰を上げて&lt;a href=&#34;https://tracker.debian.org/news/1021441/accepted-nadoka-092-1-source-into-unstable/&#34;&gt;更新しておいた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/15/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/15/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=919337&#34;&gt;JDパッケージの削除を登録した&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>DDのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/14/dd%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/14/dd%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://twitter.com/kmuto/status/1083503599374675968&#34;&gt;武藤さんがDDを引退された&lt;/a&gt;ので、その引き継ぎとして&lt;a href=&#34;https://tracker.debian.org/pkg/mlterm&#34;&gt;mltermパッケージ&lt;/a&gt;の今後のsponsor uploadを引き受けることになった。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/14/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/14/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://tracker.debian.org/news/1020603/accepted-whizzytex-133-01-source-into-unstable/&#34;&gt;whizzytexパッケージをアップロード&lt;/a&gt;。作業自体は以前にあらかたしていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;問題だったのは&lt;code&gt;autopkgtest&lt;/code&gt;。ファイルを開くだけでwhizzytex-modeを実行しないとテストの意味がないので&lt;code&gt;emacs --script test.el test.tex&lt;/code&gt;のようにして&lt;code&gt;test.el&lt;/code&gt;の中で以下のようにするなどした。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(find-file (nth 0 command-line-args-left))
(whizzytex-mode 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;その後、どうやっても1つ目のテスト以外コケるな…と思ったら、もともとの&lt;code&gt;testfile&lt;/code&gt;ファイルにtypoがあって&lt;code&gt;test.tex&lt;/code&gt;とすべきところを&lt;code&gt;test.txt&lt;/code&gt;になってて、存在しないファイルなのでコケるという…ターミナル中で実行した時はbashの補完だったから気づかなかったよ…&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tracker.debian.org/news/1020620/accepted-ruby-aruba-0147-1-source-into-unstable/&#34;&gt;ruby-arubaパッケージをアップロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ruby-bcat&lt;/code&gt;への依存、ずっと前から要らなくなっていたようだ…見落としてた。これでCIが通るようになるはず。&lt;/li&gt;
&lt;li&gt;ん？ということは&lt;code&gt;ruby-bcat&lt;/code&gt;をRMしてもいいんじゃないか。ざっくり&lt;code&gt;apt-rdepends&lt;/code&gt;した結果では依存はないし、&lt;a href=&#34;https://codesearch.debian.net/search?q=ruby-bcat&amp;amp;perpkg=1&#34;&gt;codesearch.debian.netの検索結果&lt;/a&gt;もそれらしいものはない。&lt;code&gt;grep-dctrl&lt;/code&gt;でも同様なので、&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=919248&#34;&gt;RM依頼を登録&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ grep-dctrl -FBuild-Depends ruby-bcat -sPackage /var/lib/apt/lists/*Sources
Package: ruby-aruba
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=918474&#34;&gt;libmojo-ioloop-readwriteprocess-perlパッケージ&lt;/a&gt;が入ってくれたので、手元の&lt;code&gt;os-autoinst&lt;/code&gt;をmaster HEADに更新。予想通りだが、i386でのエラーは変わらず…。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ubuntu-keyring&lt;/code&gt;パッケージの&lt;code&gt;debconf template&lt;/code&gt;査読が返ってきてたので、mergeしないと…。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;だいぶ前に&lt;a href=&#34;https://bugs.launchpad.net/ubuntu/+source/jd/+bug/1799044&#34;&gt;jdがクラッシュするよ、とlaunchpadの方でレポートがあった&lt;/a&gt;（けど、debianからsyncしてるだけだからあんまり見ないんだよね、launchpad…ログインするのも手間だし）のだけど、その後のreplyに何の返答もない。それでいて「Debian/Ubuntuのパッケージはメンテされてない」とか言いふらすのは止めてほしいよね…（こちらとしては、そもそも2ch（今は5chなんだっけ）の方で仕様変更が云々あって見ない＆使わない状態が続いてるのに加えて、upstreamに動きがないためにチェックする機会も無かったのだ）。で、forkだと思しきrepositoryの方では名称変更が検討されてたので、&lt;a href=&#34;https://github.com/yama-natuki/JD/issues/15&#34;&gt;パッケージにしたいなー&lt;/a&gt;というのは伝えておいた。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/09/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/09/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;debootstrapにバグレポートが。

&lt;ul&gt;
&lt;li&gt;busyboxではdateのparseに失敗する、とのことだったのでそのチェックを追加&lt;/li&gt;
&lt;li&gt;もう一つはInReleaseファイルの書式の方なので、もうちょっと検討する。&lt;code&gt;Valid-Until: Tue, 15 Jan 2019 20:29:52 UTC&lt;/code&gt;のようにValid-Untilがあるのが普通と思ったが、Stretchだとないな…「存在しなければOKを返す」が必要そうだ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.debian.org/security/2019/dsa-4364&#34;&gt;DSA-4364-1&lt;/a&gt;が出た。お疲れ様でした。&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/07/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/07/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;眠れなくなってしまったので&lt;a href=&#34;https://tracker.debian.org/news/1018082/accepted-snapper-081-3-source-into-unstable/&#34;&gt;snapperパッケージのミス修正とR3いれてアップロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;もう月曜日だ！ということで&lt;a href=&#34;https://tracker.debian.org/news/1018088/accepted-debootstrap-10113-source-into-unstable/&#34;&gt;debootstrapのアップロードを上げる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;某所の喧々諤々のメールのやり取りに辟易して「おまらディスカッション好きなの結構だがな、とっととコード書けやコラ」というメールを送ってしまう。ふー。&lt;/li&gt;
&lt;li&gt;os-autoinstのperltidyの問題、&lt;a href=&#34;https://progress.opensuse.org/issues/45740&#34;&gt;バージョン間の非互換性によるものだった&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;で、amd64でのビルドは通ったのでi386でやったらまたも同じエラー…仕方がないので&lt;a href=&#34;https://progress.opensuse.org/issues/45782&#34;&gt;チケットを上げた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;先日のsecurity update、「前のパッチにノイズがー」と言われて「？？？」となったが、よく見たら&lt;code&gt;git-buildpackage&lt;/code&gt;によるpatchへの変更が入ってた…取り除いて&lt;code&gt;security-master&lt;/code&gt;へアップロード。&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/06/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/06/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;snapperパッケージ&lt;/code&gt;のbug triage

&lt;ul&gt;
&lt;li&gt;報告から３年、&lt;code&gt;moreinfo&lt;/code&gt;タグ付けて「もっと詳しくー」と書いたのに何も有用な話が無い&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=791365#20&#34;&gt;バグを閉じた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「snapshotでディスクフルになるー」は、0.8.0からどうやら新しいオプションが増えて有用そうなので&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=876675#37&#34;&gt;「これで解決しない？」と聞いてみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;その過程でmanで書いてあることとconfigで書いてあることが違うのを見つけたので&lt;a href=&#34;https://github.com/openSUSE/snapper/pull/469&#34;&gt;pull request&lt;/a&gt;して、パッケージの方に当てて&lt;a href=&#34;https://tracker.debian.org/news/1017985/accepted-snapper-081-2-source-into-unstable/&#34;&gt;アップロード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debootstrap&lt;/code&gt;の変更をpush&lt;/li&gt;
&lt;li&gt;ruby-なパッケージのtest failed、&lt;a href=&#34;https://uwabami.junkhub.org/log/20121210.html&#34;&gt;佐々木さんのblog&lt;/a&gt;にあった&lt;code&gt;「test/ 以下で実行されることを前提として, 相対パスで必要なライブラリを読み込んでいたりする gem とか?」&lt;/code&gt;ということやね。

&lt;ul&gt;
&lt;li&gt;ということで、&lt;code&gt;ruby-netrc&lt;/code&gt;パッケージについて&lt;code&gt;require_relative&lt;/code&gt; に書き換えて実施してみる。あとで&lt;a href=&#34;https://ci.debian.net/packages/r/ruby-netrc/unstable/amd64/&#34;&gt;結果&lt;/a&gt;確認しよう…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;昨日のos-autoinst、対象アーキテクチャを絞ったつもりで忘れてた…&lt;a href=&#34;https://tracker.debian.org/news/1017986/accepted-os-autoinst-4515273084058b586d5-4-source-into-unstable/&#34;&gt;アップロード&lt;/a&gt;…ぬぉぉ &lt;code&gt;i386&lt;/code&gt;アーキテクチャで&lt;code&gt;FAIL: 01-test_needle.t&lt;/code&gt;とテストに失敗するぞ…、手元の&lt;code&gt;sbuild&lt;/code&gt;でも同じだ…以前は問題なく通ってたのにどうなってんだ？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;not ok 14 - found area is the original one too
#   Failed test &#39;found area is the original one too&#39;
#   at ./01-test_needle.t line 73.
#  got: &#39;944&#39;
#     expected: &#39;108&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うーん。&lt;/p&gt;

&lt;p&gt;とはいえ、upstreamでは直ってるかもしれないよな、と１年間タグが打たれてないupstream HEADをmergeしてビルドする…とテストがコケまくる。一つは依存関係のパッケージが無かったのでいれたのだけど、もう一つの&lt;code&gt;Mojo::IOLoop::ReadWriteProcess&lt;/code&gt;はパッケージ自体がDebianのリポジトリにない…仕方がないから&lt;code&gt;dh-make-perl&lt;/code&gt;で手元で作って&lt;code&gt;ITP(intend to package)&lt;/code&gt;して、アップロードした。&lt;/p&gt;

&lt;p&gt;で、&lt;code&gt;libmojo-ioloop-readwriteprocess-perl&lt;/code&gt;パッケージをテスト環境のchrootに突っ込んでビルドの様子見るか…としたら、やっぱり&lt;code&gt;FAIL: 03-testapi.t&lt;/code&gt;とエラーが出る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;^* matches null string many times in regex; marked by &amp;lt;-- HERE in m/^* &amp;lt;-- HERE \.t|^data\/tests\/*|^fake\/tests\/*/ at /usr/lib/x86_64-linux-gnu/perl5/5.28/Devel/Cover.pm line 379.
Can&#39;t locate Test/Exception.pm in @INC (you may need to install the Test::Exception module) (@INC contains: .. ../ppmclibs ../ppmclibs/blib/arch/auto/tinycv .. ../ppmclibs ../ppmclibs/blib/arch/auto/tinycv /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.28.1 /usr/local/share/perl/5.28.1 /usr/lib/x86_64-linux-gnu/perl5/5.28 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.28 /usr/share/perl/5.28 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base) at ./03-testapi.t line 14.
BEGIN failed--compilation aborted at ./03-testapi.t line 14.
FAIL 03-testapi.t (exit status: 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あー &lt;code&gt;Test/Exception.pm&lt;/code&gt;が見つけられないのか。&lt;code&gt;libtest-exception-perl&lt;/code&gt;パッケージを入れる…お、テストは全部通った！と思いきや&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make  check-local
make[4]: Entering directory &#39;/build/os-autoinst-4.5.1527308405.8b586d5.20190104&#39;
./tools/tidy --check 
--- ./t/16-send_with_fd.t       2019-01-04 11:55:46.000000000 +0000   
+++ ./t/16-send_with_fd.t.tdy   2019-01-06 13:43:40.463129038 +0000   
@@ -33,7 +33,7 @@    
     shutdown($ask, 2);      
   
     my @cmsg = $msg-&amp;gt;cmsghdr();       
-    my $fd   = unpack(&#39;i&#39;, $cmsg[2]); 
+    my $fd = unpack(&#39;i&#39;, $cmsg[2]);   
   
     POSIX::write($fd, $msg-&amp;gt;buf(), 4) 
       || die &amp;quot;Failed to write echo to pipe: $!&amp;quot;;   
RUN tools/tidy script before checkin
make[4]: *** [Makefile:1457: check-local] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんじゃこりゃー。&lt;code&gt;tools/tidy&lt;/code&gt;スクリプトによるチェックが&lt;code&gt;check-local&lt;/code&gt;ターゲットで走って、修正が加わってないのがエラーになるという…なんでupstream側で対処してないんだよ。もういい、今日はここまで。openSUSEのtrackerに&lt;a href=&#34;https://progress.opensuse.org/issues/45740&#34;&gt;報告しておく&lt;/a&gt;。ついでに&lt;a href=&#34;https://progress.opensuse.org/issues/45743&#34;&gt;tag打って&lt;/a&gt;、も。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>DDのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/05/dd%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/05/dd%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;倉敷さんの&lt;code&gt;goldencheetah&lt;/code&gt;パッケージの状況をヒアリング。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libusb0.1&lt;/code&gt;に依存しているが、&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=810470&#34;&gt;libusb0.1はもう古いからDebianから消したいよね&lt;/a&gt;という動きがある。&lt;/li&gt;
&lt;li&gt;でも&lt;code&gt;goldencheetah&lt;/code&gt;側としては&lt;a href=&#34;https://groups.google.com/forum/#!msg/golden-cheetah-developers/EQxEEIQbRXc/ZSeSOBF8AwAJ&#34;&gt;「マルチプラットフォーム対応してるので、壊したくないよね」&lt;/a&gt;なので&lt;code&gt;libusb1.0&lt;/code&gt;に動くのは消極的&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/libusb/libusb-compat-0.1&#34;&gt;libusb-compat&lt;/a&gt;という「libusb1.0のwrapperで0.1相当の動きをする」のがあるから、これを使えば？という流れはある。

&lt;ul&gt;
&lt;li&gt;ただし、&lt;code&gt;goldencheetah&lt;/code&gt;では「使うようにしよう」というPRが来ているものの実装はされてない感じ&lt;/li&gt;
&lt;li&gt;Debian側も&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=810470#194&#34;&gt;deadからhalf-deadになるだけじゃね？というコメント&lt;/a&gt;もある。&lt;/li&gt;
&lt;li&gt;個人的にはhalf-deadならいいじゃん、と思うけど…&lt;/li&gt;
&lt;li&gt;ちなみに&lt;code&gt;libusb-compat&lt;/code&gt;はDebianではパッケージになっていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ついでの気晴らしにdebianディレクトリ以下をレビューしてmerge requestを送った。要点は以下の感じ

&lt;ul&gt;
&lt;li&gt;最新の&lt;code&gt;dh12&lt;/code&gt;に更新、不要になったファイルやオプションを消す&lt;/li&gt;
&lt;li&gt;insecureなgitプロトコルやhttpをhttpsに置き換え&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debian/watch&lt;/code&gt;はv4形式にして簡易に書ける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;cosmetic changesなわけだけど、パッケージの「メンテナンス」ってそんなもんですよ、っと。これが最初の「パッケージング」だと色々と技術的にどう対処するか？の問題を解く感じになる。&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/05/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/05/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://nthykier.wordpress.com/2019/01/04/debhelper-compat-12-is-now-released/&#34;&gt;“debhelper-compat (= 12)” is now released&lt;/a&gt;を読む。&lt;code&gt;Rules-Requires-Root support when the field is set and dpkg-dev notifies debhelper that it supports the feature (requires dpkg-dev from Debian buster).  Besides removing the need for (fake)root it can also remove about 3 invocations of debian/rules.&lt;/code&gt;との記述。&lt;code&gt;Rules-Requires-Root: no&lt;/code&gt;のようにするとfakerootの起動とdebian/rulesの呼び出しが無くなって早くなるぜ、ということらしい。&lt;/p&gt;

&lt;p&gt;試しに&lt;code&gt;dpkg-dev&lt;/code&gt;をBuild-Dependsにしてみたら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;E: os-autoinst source: build-depends-on-build-essential-package-without-using-version dpkg-dev [build-depends: dpkg-dev]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あら。。。&lt;code&gt;dpkg-dev 1.19.0&lt;/code&gt;からサポートのようなので修正。しかし、ビルドにroot権限が必要なパッケージのほうが少なさそうだから、これは&lt;code&gt;no&lt;/code&gt;をデフォルトにして&lt;code&gt;Rules-Requires-Root: yes&lt;/code&gt;を明示的に宣言させるほうが良くないかね？と思ったので&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=793404#81&#34;&gt;質問してみた&lt;/a&gt;→やはりそのようだ。しかし、それを実装するとなると対応パッケージが多数になってしまうだろうという懸念がある模様。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;上記の変更その他を加えて&lt;a href=&#34;https://tracker.debian.org/news/1017677/accepted-os-autoinst-4515273084058b586d5-3-source-into-unstable/&#34;&gt;os-autoinstパッケージをアップロード&lt;/a&gt;。&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=910463&#34;&gt;RCバグ&lt;/a&gt;は&lt;code&gt;severity&lt;/code&gt;を下げておいた。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debootstrap&lt;/code&gt;パッケージ、夏に作業して放置してたMergeRequestを変更を追加して&lt;a href=&#34;https://salsa.debian.org/installer-team/debootstrap/merge_requests/21#00b94c53ad826b3090c6fd9524b609958d9ec7a9&#34;&gt;Mergeした&lt;/a&gt;。&lt;code&gt;git rebase&lt;/code&gt;なんて初めて使ったぞ。反応を様子見してから月曜にでもアップロードするかな。&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>DDのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/04/dd%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/04/dd%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;倉敷さんがビルドマシンが家のNASで遅いという話をしていたので、CloudGarageさんの開発者支援制度でお借りしているホストを一台セットアップして渡した。外堀を埋める方向。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>debootstrapを速くするには</title>
            <link>https://henrich.github.io/blog/2019/01/04/debootstrap%E3%82%92%E9%80%9F%E3%81%8F%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</link>
            <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/04/debootstrap%E3%82%92%E9%80%9F%E3%81%8F%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</guid>
            <description>&lt;p&gt;&lt;code&gt;debootstrap&lt;/code&gt;は最低限のDebian環境の作成に使われるツール。&lt;code&gt;pbuilder&lt;/code&gt;や&lt;code&gt;cowbuilder&lt;/code&gt;（とその環境を使う&lt;code&gt;piuparts&lt;/code&gt;）などのツールの裏側でも動くし、&lt;code&gt;docker&lt;/code&gt;イメージの裏側もコイツ。ちなみに環境構築にはリポジトリから必要なパッケージを取得してくるので、それなりに時間がかかる（しかも最初は&lt;code&gt;apt&lt;/code&gt;も使えないので&lt;code&gt;wget&lt;/code&gt;で取得するんだぜ？）。うーむ。&lt;/p&gt;

&lt;p&gt;で、どうやって時間を短縮するか？というと、以下のような選択肢がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ローカルミラーをセットアップしてそれを参照する&lt;/li&gt;
&lt;li&gt;ローカルプロキシをセットアップしてそれを参照する&lt;/li&gt;
&lt;li&gt;ローカルキャッシュをセットアップしてそれを参照する&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;1のミラーはまるっとDebianリポジトリをコピーするやり方。

&lt;ul&gt;
&lt;li&gt;クライアントが何十台、スペックによっては何百台とかあっても対応できる&lt;/li&gt;
&lt;li&gt;どのパッケージでもLAN内にあるので取得が早い&lt;/li&gt;
&lt;li&gt;でも、ミラーを構築するには最低でも数百GBのディスクを使うことになるし、更新も追随するとなるとそれなりにトラフィックが生じる&lt;/li&gt;
&lt;li&gt;ぶっちゃけオーバースペックすぎる。牛刀をもって鶏頭を裂く、的な。&lt;/li&gt;
&lt;li&gt;あと、必ずそのミラー参照するようになるので、Laptopで作って移動したときには面倒になるかも&lt;/li&gt;
&lt;li&gt;構築するなら&lt;code&gt;ftpsync&lt;/code&gt;使おうね。他のツールはダメダメ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2のプロキシは&lt;code&gt;squid&lt;/code&gt;などのサーバーを立てるやり方。

&lt;ul&gt;
&lt;li&gt;取得したパッケージだけをキャッシュするのでディスク容量がミラーより格段に少なくて済む&lt;/li&gt;
&lt;li&gt;ミラーと同様に複数のマシンからも参照可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debootstrap 1.0.96&lt;/code&gt;から&lt;code&gt;squid-deb-proxy-client&lt;/code&gt;をインストールしておくと、&lt;code&gt;squid-deb-proxy&lt;/code&gt;で立ち上げたプロキシサーバーを自動的に参照するようになる。&lt;code&gt;apt-cacher&lt;/code&gt;などだと一々プロキシがどこにあるのかを指定しないといけないので、&lt;code&gt;squid-deb-proxy&lt;/code&gt;マジおすすめ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3のキャッシュは&lt;code&gt;--cache-dir&lt;/code&gt;オプションを使って、適当なところにキャッシュしておいたdebパッケージを参照するやり方。`

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debootstrap 1.0.97&lt;/code&gt;から実装済み。一台だけでやるならこれで十分。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--cache-dir=/home/henrich/tmp/cachedir&lt;/code&gt;というように、このオプションでは絶対パスで参照するのが必要。&lt;code&gt;~/tmp/cachedir&lt;/code&gt;の様な指定はできない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと、リポジトリのミラーは&lt;code&gt;debootstrap 1.0.85&lt;/code&gt;から&lt;a href=&#34;https://deb.debian.org&#34;&gt;deb.debian.org&lt;/a&gt;を参照するようになっている。これはFastly提供のCDNだけど、個人的には自分が運用している&lt;a href=&#34;http://debian-mirror.sakura.ne.jp&#34;&gt;debian-mirror.sakura.ne.jp&lt;/a&gt;を使っている。これは異常があったらすぐ気付くように、というドッグフーディングの側面もあるが、利用者がそんなに多くないので快適だということもある。もっと使っていいのよ？&lt;/p&gt;

&lt;p&gt;最後に、記述時の最新である&lt;code&gt;debootstrap 1.0.112&lt;/code&gt;はMr.FAIこと&lt;code&gt;Thomas Lange&lt;/code&gt;さんのハックによってパッケージ依存関係の最適化（これも&lt;code&gt;apt&lt;/code&gt;が使われてはいない）が図られているので、随分と時間が短縮されている。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;結論：debootstrap 1.0.112以降を使おう&lt;/strong&gt;。&lt;code&gt;debootstrap&lt;/code&gt;はshell script＋embedded perlコードというアレなやつなので、環境依存が極小であり、どのバージョンでも動くよ。バグがあったら教えてくださいな。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/04/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/04/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;Ultimate Debian Databaseの&lt;a href=&#34;https://udd.debian.org/bugs/?release=buster_and_sid&amp;amp;merged=ign&amp;amp;done=only&amp;amp;rc=1&amp;amp;flastmod=ign&amp;amp;flastmodval=5&amp;amp;sortby=last_modified&amp;amp;sorto=asc&amp;amp;ctags=1&amp;amp;cdeferred=1&amp;amp;caffected=1&amp;amp;cautormtime=1&amp;amp;cmissingbuilds=1&amp;amp;&#34;&gt;Bug search Cleaner view&lt;/a&gt;から。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xfce4関連パッケージがメンテナアドレスがaliothの消滅に伴う無効化されたもので、experimentalでは直ってるというしょーもない状態だったので状況を調査。

&lt;ul&gt;
&lt;li&gt;どうやら4.13というupstreamではdevelopment releaseな奴でアップデートしたからunstableに放り込むのがためらわれてるようだ&lt;/li&gt;
&lt;li&gt;fedoraとxubuntuはそれでも4.13リリースをぶち込んだ模様。&lt;/li&gt;
&lt;li&gt;というのを踏まえて「どーする？」という質問を投げた→「わかってる、4.14がリリースされたらそれを入れる」という回答。んーしばらくは放置か…。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;uglifyjsのFTBFS、experimentalでは直ってるよ、という話

&lt;ul&gt;
&lt;li&gt;semver（セマンティックバージョニング）でわかるように大幅に変更されてるから、依存関係で不具合でるんじゃね？という理由でexperimentalに隔離されているようだ&lt;/li&gt;
&lt;li&gt;では、ということでお手軽に&lt;code&gt;apr-rdependes&lt;/code&gt;で依存パッケージの確認&lt;/li&gt;
&lt;li&gt;emscriptenは内部に古い古いuglifyjs持ってるみたい…&lt;/li&gt;
&lt;li&gt;lavaはソース落としてみたけど、バージョン指定の情報は特に無し。&lt;/li&gt;
&lt;li&gt;node-grunt-contrib-uglifyは新しいバージョンならサポートしてる&lt;/li&gt;
&lt;li&gt;node-uglifyjs-webpack-pluginも新しいバージョンならサポートしてる&lt;/li&gt;
&lt;li&gt;ruby-uglifierも新しいバージョンならサポートしている&lt;/li&gt;
&lt;li&gt;というのを踏まえると、node-grunt-contrib-uglify、node-uglifyjs-webpack-plugin、ruby-uglifierを最新バージョンにしてexperimentalに上げる、がいいのかな。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;powermockがJava9ではビルドできないけど、新しいupstreamバージョンならOKよ、という話

&lt;ul&gt;
&lt;li&gt;やってみようとしたらビルドシステムからまるっと変わっていて（maven→gradle）、どうしようかな、というところ。gradle全然使ったこと無いのよね…&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/Java/Packaging/Gradle&#34;&gt;Debian Wikiのページ&lt;/a&gt;にあった。&lt;code&gt;gradle-debian-helper&lt;/code&gt;パッケージをBuild-Dependsに加えて、&lt;code&gt;debian/rules&lt;/code&gt;で&lt;code&gt;dh $@ -with buildsystem=gradle&lt;/code&gt;&amp;hellip;って間違ってるやん&lt;code&gt;--buildsystem=gradle&lt;/code&gt;だよね…。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;* What went wrong:
A problem occurred configuring root project &#39;powermock&#39;.
&amp;gt; Could not resolve all files for configuration &#39;:classpath&#39;.
   &amp;gt; Could not resolve org.springframework.build.gradle:propdeps-plugin:0.0.7.
     Required by:
         project :
      &amp;gt; No cached version of org.springframework.build.gradle:propdeps-plugin:0.0.7 available for offline mode. 
      &amp;gt; No cached version of org.springframework.build.gradle:propdeps-plugin:0.0.7 available for offline mode. 
      &amp;gt; No cached version of org.springframework.build.gradle:propdeps-plugin:0.0.7 available for offline mode.
      &amp;gt; No cached version of org.springframework.build.gradle:propdeps-plugin:0.0.7 available for offline mode.
   &amp;gt; Could not resolve com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4.
     Required by:  
         project : 
      &amp;gt; No cached version of com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4 available for offline mode.
      &amp;gt; No cached version of com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4 available for offline mode.   
      &amp;gt; No cached version of com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4 available for offline mode.      
      &amp;gt; No cached version of com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4 available for offline mode.   
   &amp;gt; Could not resolve net.researchgate:gradle-release:2.4.0.
     Required by:
         project :   
      &amp;gt; No cached version of net.researchgate:gradle-release:2.4.0 available for offline mode.
      &amp;gt; No cached version of net.researchgate:gradle-release:2.4.0 available for offline mode.    
      &amp;gt; No cached version of net.researchgate:gradle-release:2.4.0 available for offline mode. 
      &amp;gt; No cached version of net.researchgate:gradle-release:2.4.0 available for offline mode.
   &amp;gt; Could not resolve com.github.jengelman.gradle.plugins:shadow:1.2.4.  
     Required by:
         project : 
      &amp;gt; No cached version of com.github.jengelman.gradle.plugins:shadow:1.2.4 available for offline mode.     
      &amp;gt; No cached version of com.github.jengelman.gradle.plugins:shadow:1.2.4 available for offline mode. 
      &amp;gt; No cached version of com.github.jengelman.gradle.plugins:shadow:1.2.4 available for offline mode.        
      &amp;gt; No cached version of com.github.jengelman.gradle.plugins:shadow:1.2.4 available for offline mode.  
   &amp;gt; Could not resolve org.shipkit:shipkit:2.0.31.
     Required by:      
         project :
      &amp;gt; No cached version of org.shipkit:shipkit:2.0.31 available for offline mode.
      &amp;gt; No cached version of org.shipkit:shipkit:2.0.31 available for offline mode.
      &amp;gt; No cached version of org.shipkit:shipkit:2.0.31 available for offline mode.
      &amp;gt; No cached version of org.shipkit:shipkit:2.0.31 available for offline mode.
   &amp;gt; Could not resolve ru.vyarus:gradle-animalsniffer-plugin:1.4.1.
     Required by:
         project :
      &amp;gt; No cached version of ru.vyarus:gradle-animalsniffer-plugin:1.4.1 available for offline mode.
      &amp;gt; No cached version of ru.vyarus:gradle-animalsniffer-plugin:1.4.1 available for offline mode.
      &amp;gt; No cached version of ru.vyarus:gradle-animalsniffer-plugin:1.4.1 available for offline mode.
      &amp;gt; No cached version of ru.vyarus:gradle-animalsniffer-plugin:1.4.1 available for offline mode.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーに出ている足りないパッケージについて、適当にパッケージ名を付けて&lt;code&gt;Build-Depends&lt;/code&gt;に指定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; pbuilder-satisfydepends-dummy : Depends: gradle-bintray-plugin which is a virtual package and is not provided by any available package
                                 Depends: gradle-release which is a virtual package and is not provided by any available package
                                 Depends: gradle-shadow which is a virtual package and is not provided by any available package
                                 Depends: gradle-shipkit which is a virtual package and is not provided by any available package
                                 Depends: gradle-animalsniffer-plugin which is a virtual package and is not provided by any available package
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gradle-propdeps-plugin&lt;/code&gt;はパッケージがあったので追加。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle-animalsniffer-plugin&lt;/code&gt;は&lt;a href=&#34;https://github.com/xvik/gradle-animalsniffer-plugin&#34;&gt;https://github.com/xvik/gradle-animalsniffer-plugin&lt;/a&gt;かららしい。

&lt;ul&gt;
&lt;li&gt;で、これは&lt;code&gt;animalsniffer&lt;/code&gt;に依存している。&lt;code&gt;libanimal-sniffer-java&lt;/code&gt;パッケージがあるのでこれだな。&lt;/li&gt;
&lt;li&gt;注意点が書いてある&lt;code&gt;「Use version 1.17 (toolVersion=1.17) if you need to run on java 9, but note that 1.17 can&#39;t be used on java 8 (and that&#39;s why it is not set by default)」&lt;/code&gt;→Java11でbusterはリリースされるので1.17が必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libanimal-sniffer-java&lt;/code&gt; は1.16なので、まずコイツのアップデートが必要…。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ apt-rdepends -r libanimal-sniffer-java&lt;/code&gt;の結果は何もなかったので、ぶっ込んでも大丈夫じゃないかな。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle-shipkit&lt;/code&gt;は&lt;a href=&#34;https://github.com/mockito/shipkit&#34;&gt;https://github.com/mockito/shipkit&lt;/a&gt;だな&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle-shadow&lt;/code&gt;は&lt;a href=&#34;https://github.com/johnrengelman/shadow&#34;&gt;https://github.com/johnrengelman/shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle-release&lt;/code&gt;は&lt;a href=&#34;https://github.com/researchgate/gradle-release&#34;&gt;https://github.com/researchgate/gradle-release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle-bintray-plugin&lt;/code&gt;は&lt;a href=&#34;https://github.com/bintray/gradle-bintray-plugin&#34;&gt;https://github.com/bintray/gradle-bintray-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;os-autoinstを&lt;code&gt;dh12&lt;/code&gt;に上げたらビルドがコケるように。あれ？&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# root@hp:/build/os-autoinst-4.5.1527308405.8b586d5# find . -name &#39;*.pm&#39; -print
./debian/os-autoinst/usr/libexec/os-autoinst/consoles/sshXtermIPMI.pm
./debian/os-autoinst/usr/libexec/os-autoinst/consoles/vnc_base.pm
./debian/os-autoinst/usr/libexec/os-autoinst/consoles/localXvnc.pm
./debian/os-autoinst/usr/libexec/os-autoinst/consoles/sshX3270.pm
./debian/os-autoinst/usr/libexec/os-autoinst/consoles/sshVirtsh.pm
./debian/os-autoinst/usr/libexec/os-autoinst/consoles/virtio_terminal.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おいおい。何故か&lt;code&gt;/usr/libexec&lt;/code&gt;以下にインストールするようになっとるやん。&lt;code&gt;man debhelper&lt;/code&gt;で答えを探す…見つけた。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The build systems meson and autoconf no longer explicitly set the --libexecdir variable and thus relies on the build system default - which should be /usr/libexec (per FHS 3.0, adopted in Debian Policy 4.1.5).&lt;/code&gt;ということで。どうやって直すかね。。。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;YubikeyでSSH接続しようとしたら謎のエラーがでて焦る。結局、手元の&lt;code&gt;~/.gnupg/private-keys-v1.d&lt;/code&gt;のファイルが腐ってるというオチだったのだけど、絞り込むのも時間かかった…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yubikey側の異常を疑って、testing環境で接続→問題なし（これでYubikeyが壊れた疑惑はなくなった）&lt;/li&gt;
&lt;li&gt;異常がでたdesktopのunstable環境の問題を疑って、別のunstable環境なマシンで接続→問題なし（設定が全くしていなかったのでちょっと戸惑った、これでunstableだと壊れてるというパッケージ側の問題は無い）&lt;/li&gt;
&lt;li&gt;ユーザー環境の差異を疑って、テストユーザーを作って接続→問題なし（これでいつものユーザーのhome directoryの設定が問題だろうと絞り込めた）&lt;/li&gt;
&lt;li&gt;とりあえず&lt;code&gt;mv .gnupg bak.gnupg&lt;/code&gt;などとして接続→問題なし（これで&lt;code&gt;.gnupg&lt;/code&gt;以下のファイルのうちどれかがおかしい）&lt;/li&gt;
&lt;li&gt;ひたすら旧ディレクトリから１つずつディレクトリやファイルをコピーする→絞り込めた&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;やれやれ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今日は成果が得られなかった一日。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/03/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/03/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=906688&#34;&gt;ruby-netrcパッケージのバグ&lt;/a&gt;のtriage。どうもテストケースがbuilddだと問題になるようだ（これは後に間違いだと気付く）。&lt;code&gt;assert_equal File.join(Dir.pwd, &#39;.netrc&#39;), Netrc.default_path&lt;/code&gt;が以下のような結果になる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  1) Failure:
TestNetrc#test_missing_environment [/&amp;lt;&amp;lt;PKGBUILDDIR&amp;gt;&amp;gt;/test/test_netrc.rb:203]:
--- expected
+++ actual
@@ -1,2 +1 @@
-# encoding: ASCII-8BIT
-&amp;quot;/&amp;lt;&amp;lt;PKGBUILDDIR&amp;gt;&amp;gt;/.netrc&amp;quot;
+&amp;quot;/build/.netrc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;PKGBUILDDIR&amp;gt;&amp;gt;&lt;/code&gt;なんて変わった値が放り込まれてしまっている?…と思ったら、これは「builddでのログ出力で置き換えてるだけ」なのか。手元でビルドする時は&lt;code&gt;cowbuilder&lt;/code&gt;でやってしまっていたので、&lt;code&gt;sbuild&lt;/code&gt;環境を用意するのにも時間が&amp;hellip;あれ？&lt;code&gt;sbuild&lt;/code&gt;でも普通にビルドできちゃった。というか、builddでも以前にビルド自体は出来てるのか…。はてな？&lt;/p&gt;

&lt;p&gt;バグレポートを再度よく読み、テスト部分を再確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def test_missing_environment
    nil_home = nil
    ENV[&amp;quot;HOME&amp;quot;], nil_home = nil_home, ENV[&amp;quot;HOME&amp;quot;]
    assert_equal File.join(Dir.pwd, &#39;.netrc&#39;), Netrc.default_path
  ensure
    ENV[&amp;quot;HOME&amp;quot;], nil_home = nil_home, ENV[&amp;quot;HOME&amp;quot;]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;default_path&lt;/code&gt;でgrep…。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def self.default_path
    File.join(ENV[&#39;NETRC&#39;] || home_path, netrc_filename)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あー、これだ。&lt;code&gt;NETRC&lt;/code&gt;が存在しない場合に&lt;code&gt;home_path&lt;/code&gt;、つまりは上記のエラーになる環境では&lt;code&gt;/build&lt;/code&gt;が指定されてるのにもかかわらず、ビルドをしている&lt;code&gt;Dir.pwd&lt;/code&gt;は別、ということだろうな。さて、どういうふうにして回避するかね…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    p nil_home
    p ENV[&amp;quot;HOME&amp;quot;]
    p Netrc.home_path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;quot;/home/henrich&amp;quot;
nil
&amp;quot;/build/ruby-netrc-0.11.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が返る。あれ？予想と違う。&lt;code&gt;home_path&lt;/code&gt;は&lt;code&gt;/build/ruby-netrc-0.11.0&lt;/code&gt;なのか。&lt;code&gt;ENV[&amp;quot;HOME&amp;quot;]&lt;/code&gt;が&lt;code&gt;nil&lt;/code&gt;であっても問題なし、ということを言いたいとすれば以下のようにするのが良さそう&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;--- a/test/test_netrc.rb
+++ b/test/test_netrc.rb
@@ -200,7 +200,7 @@
   def test_missing_environment
     nil_home = nil
     ENV[&amp;quot;HOME&amp;quot;], nil_home = nil_home, ENV[&amp;quot;HOME&amp;quot;]
-    assert_equal File.join(Dir.pwd, &#39;.netrc&#39;), Netrc.default_path
+    assert_equal File.join(Netrc.home_path, &#39;.netrc&#39;), Netrc.default_path
   ensure
     ENV[&amp;quot;HOME&amp;quot;], nil_home = nil_home, ENV[&amp;quot;HOME&amp;quot;]
   end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でアップロードした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ruby-eventmachineパッケージのFTBFSがpendingに１０ヶ月ぐらいなったままなので&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=816640#26&#34;&gt;質問した&lt;/a&gt;。→どうやらsegfaultするという問題があるらしい。うーむ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;os-autoinstを直せるかな、と思ってビルドするも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;The following packages have unmet dependencies:
 libopencv-imgcodecs3.2 : Depends: gdal-abi-2-3-0 which is a virtual package and is not provided by any available package

 libvtk6.3 : Depends: gdal-abi-2-3-0 which is a virtual package and is not provided by any available package 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;げぇ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Package: libgdal20
Version: 2.4.0+dfsg-1
Priority: optional
Section: libs
Source: gdal
Maintainer: Debian GIS Project &amp;lt;pkg-grass-devel@lists.alioth.debian.org&amp;gt;
Installed-Size: 20.2 MB
Provides: gdal-abi-2-4-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こいつか…。&lt;a href=&#34;https://release.debian.org/transitions/html/gdal-2-4-0.html&#34;&gt;Transition tracker&lt;/a&gt;を見る限り、ここ１時間でビルドされたりしてるので、今日はたまたまあたってしまった、という感じか。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://tracker.debian.org/news/1016843/accepted-fonts-monapo-20170722-2-source-into-unstable/&#34;&gt;fonts-monapoパッケージをアップデート&lt;/a&gt;。upstreamが配布しなくなってた。&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/02/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/02/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;ubuntu-keyringパッケージの変更の続き。build時にもファイルチェックをするようにしたり。shellscriptでは&lt;code&gt;tempdir=`mktemp -d`&lt;/code&gt;のようにしてtempdirを指定したのだけど、makeでは&lt;code&gt;$$tempdir&lt;/code&gt;が空になるので、&lt;code&gt;$(CURDIR)/debian/tmp&lt;/code&gt; 決め打ちで逃げた…どうやるのがいいんでしょうねぇ？&lt;/p&gt;

&lt;p&gt;autopkgtest実施時にパッケージの分割・リネームの結果、パッケージリポジトリに該当のパッケージがなくてパッケージを引っ張ってこようとしてエラーとなるという予想外のエラー。気付くまでにまたしても時間を要した。とりあえず&lt;code&gt;sudo cowbuilder --login --inputfile a.deb --inputfile b.deb --save-after-exec&lt;/code&gt;としてchroot環境に入り&lt;code&gt;apt install /buildd/a.deb /buildd/b.deb&lt;/code&gt;などとしてローカル環境に加えて様子見→エラー解消。やれやれ。しかし、これを失念してその後で&lt;code&gt;piuparts&lt;/code&gt;でパッケージチェックしたらdebconf関連ファイルがそのまま残ってるぞ、というエラーになって苦悶した（&lt;code&gt;sudo cowbuilder --create&lt;/code&gt;しなおして対処）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パッケージを分割した&lt;/li&gt;
&lt;li&gt;インストールするkeyringをUbuntuのパッケージを参考にして変更した&lt;/li&gt;
&lt;li&gt;debconfで質問される &lt;code&gt;/etc/apt/trusted.gpg.d&lt;/code&gt; にsymlinkを張るkeyringをUbuntuのパッケージを参考に調整した&lt;/li&gt;
&lt;li&gt;autopkgtestをまともなものにした&lt;/li&gt;
&lt;li&gt;build時にもautopkgtest相当が動作するようにした&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回の変更はこんな感じか。パッケージ分割で新しいバイナリパッケージが増えるから&lt;a href=&#34;https://ftp-master.debian.org/new.html&#34;&gt;NEW queue&lt;/a&gt;待ちに。どれだけかかるのかな。。&lt;/p&gt;

&lt;p&gt;そしてアップロード後もエラーを踏む。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source-only uploads to NEW are not allowed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんと、そうだったのか。最近は&lt;code&gt;arch=all&lt;/code&gt;パッケージとかも手元でビルドしたバイナリではなくbuilddでビルドしたものを、と思って&lt;code&gt;git-buildpackage&lt;/code&gt;のオプションで&lt;code&gt;--git-pbuilder-options=&amp;quot;--source-only-changes&amp;quot;&lt;/code&gt;などとしていたのが仇に。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;淡々と&lt;a href=&#34;https://tracker.debian.org/news/1016437/accepted-jcodings-1042-1-source-into-unstable/&#34;&gt;jcodingsパッケージをアップデート&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;grcompilerに&lt;a href=&#34;https://tracker.debian.org/news/1016599/accepted-grcompiler-42-7-source-into-unstable/&#34;&gt;投稿されてたパッチをマージ&lt;/a&gt;。自分の作った地雷を踏むという失態を。

&lt;ul&gt;
&lt;li&gt;upstreamが4.3を出してるのだけど、これをマージした所ビルドも通らない代物だったのでそのまま放置してたのを忘れてパッチを当ててビルドが通らないものとして悩んでしまった。一旦debian/4.2ブランチを作ってこっちに。&lt;/li&gt;
&lt;li&gt;で、全部終わってpushしようとしたらrejectされる…って他のメンテナが変更を加えてた。変更を&lt;code&gt;git format-patch&lt;/code&gt;して一旦逃してから全削除→&lt;code&gt;git clone&lt;/code&gt;して当て直し。そしてメンテナの作業ミスを見つけて直すなども。やれやれ。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>めんてなのおしごと</title>
            <link>https://henrich.github.io/blog/2019/01/01/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</link>
            <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
            <author>henrich@debian.org (Hideki Yamane)</author>
            <guid>https://henrich.github.io/blog/2019/01/01/%E3%82%81%E3%82%93%E3%81%A6%E3%81%AA%E3%81%AE%E3%81%8A%E3%81%97%E3%81%94%E3%81%A8/</guid>
            <description>&lt;p&gt;ubuntu-keyringパッケージの変更の続き。Ubuntu側と内容を合わせる形に変更で、パッケージを増やしたり。&lt;code&gt;.install&lt;/code&gt;ファイルの指定が微妙でインストールされるファイルが被ってしまう問題、&lt;code&gt;[0-9]*&lt;/code&gt;で数字だけ指定されるかと思ったら、そうでなかった。。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keyrings/ubuntu-keyring-[0-9]*[!a-z]-archive.gpg      usr/share/keyrings/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というようにした。&lt;/p&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
